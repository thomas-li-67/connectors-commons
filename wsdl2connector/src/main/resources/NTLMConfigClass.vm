package $modeledClass.basePackage;

import org.apache.cxf.configuration.security.AuthorizationPolicy;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.components.ConnectionManagement;
import org.mule.api.annotations.display.Placement;

import javax.xml.ws.BindingProvider;
import java.net.Authenticator;
import java.net.PasswordAuthentication;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

#foreach($import in $modeledClass.imports)
import ${import};
#end

@ConnectionManagement(configElementName="ntlm-connection-config", friendlyName="NTLM Connection")
public class ${modeledClass.name} extends ${modeledClass.baseConfigClass.name} {

    private static final Logger logger = LoggerFactory.getLogger(${modeledClass.name}.class);

    @Configurable
    @Placement(order = 3)
    private String domain;

    public $modeledClass.client createClient(String username, String password) {
        logger.info("Configuring NTLM.");

        $modeledClass.service service = new ${modeledClass.service}();
        $modeledClass.client wsClient = service.${modeledClass.clientRetrievalMethod}();
        configureCXF(username, password, domain, service);
        logger.info("Connection ready.");
        return service.${modeledClass.clientRetrievalMethod}();
    }

    public String getDomain() {
        return domain;
    }

    public void setDomain(String domain) {
        this.domain = domain;
    }

public static void configureCXF(final String username, final String password, final String domain, $modeledClass.service service ) {
        Authenticator.setDefault(new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return (new PasswordAuthentication(username + "@" + domain, password.toCharArray()));
            }
        });
        $modeledClass.client port = service.${modeledClass.clientRetrievalMethod}();
        Client client = ClientProxy.getClient(port);
        HTTPConduit http = (HTTPConduit) client.getConduit();
        http.getAuthorization().setUserName(username);
        http.getAuthorization().setPassword(password);
        AuthorizationPolicy policy = new AuthorizationPolicy();
        policy.setUserName(username);
        policy.setPassword(password);
        http.setAuthorization(policy);
        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
        httpClientPolicy.setConnectionTimeout(36000);
        httpClientPolicy.setAllowChunking(false);
        http.setClient(httpClientPolicy);
        client.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "http://ec2-52-43-87-110.us-west-2.compute.amazonaws.com:48620/DynamicsGPWebServices/DynamicsGPService.asmx");
    }


}
