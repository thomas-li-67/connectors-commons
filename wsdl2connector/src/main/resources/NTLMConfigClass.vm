package $modeledClass.basePackage;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.components.ConnectionManagement;
import org.mule.api.annotations.display.Placement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.cxf.Bus;
import org.apache.cxf.BusFactory;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.NTCredentials;
import org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduit;
import org.apache.http.impl.nio.client.DefaultHttpAsyncClient;

import com.microsoft.schemas.dynamics.gp._2006._01.DynamicsGP;
import com.microsoft.schemas.dynamics.gp._2006._01.DynamicsGP_Service;
import org.apache.cxf.Bus;
import org.apache.cxf.BusFactory;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduit;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.NTCredentials;
import org.apache.http.impl.nio.client.DefaultHttpAsyncClient;

import java.io.IOException;


#foreach($import in $modeledClass.imports)
import ${import};
#end

@ConnectionManagement(configElementName="ntlm-connection-config", friendlyName="NTLM Connection")
public class ${modeledClass.name} extends ${modeledClass.baseConfigClass.name} {

    private static final Logger logger = LoggerFactory.getLogger(${modeledClass.name}.class);

    @Configurable
    @Placement(order = 3)
    private String domain;

    public $modeledClass.client createClient(String username, String password) {
        logger.info("Configuring NTLM.");

        $modeledClass.service service = new ${modeledClass.service}();
        $modeledClass.client dynamicsGP = service.getLegacyDynamicsGP();

        configureCXF(username, password, domain, dynamicsGP);
        logger.info("Connection ready.");
        return dynamicsGP;
    }

    public String getDomain() {
        return domain;
    }

    public void setDomain(String domain) {
        this.domain = domain;
    }

public static void configureCXF(final String username, final String password, final String domain, $modeledClass.client dynamicsGP ) {

        Bus bus = BusFactory.getDefaultBus();
        bus.setProperty("use.async.http.conduit", "true");
        Client client = ClientProxy.getClient(dynamicsGP);
        HTTPConduit http = (HTTPConduit) client.getConduit();
        if (http instanceof AsyncHTTPConduit) {
            AsyncHTTPConduit conduit = (AsyncHTTPConduit) http;
            DefaultHttpAsyncClient defaultHttpAsyncClient;
            try {
                defaultHttpAsyncClient = conduit.getHttpAsyncClient();
            } catch (IOException exception) {
                throw new RuntimeException(exception);
            }
            defaultHttpAsyncClient.getCredentialsProvider().setCredentials(AuthScope.ANY,
                    new NTCredentials(username, password, "", domain));
            conduit.getClient().setAllowChunking(false);
            conduit.getClient().setAutoRedirect(true);
        }
    }


}
