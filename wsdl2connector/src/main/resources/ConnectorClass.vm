package $modeledClass.basePackage;

import org.mule.api.annotations.Config;
import org.mule.api.annotations.Processor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.RefOnly;

import ${modeledClass.baseConfigClass.basePackage}.${modeledClass.baseConfigClass.name};
import ${modeledClass.basePackage}.entities.*;

public abstract class ${modeledClass.name} {

    private static final Logger logger = LoggerFactory.getLogger(${modeledClass.name}.class);

#foreach($processor in ${modeledClass.processors})

    @Processor
    public $processor.returnType ${processor.name}(@Default("#[payload]") @RefOnly ${processor.unifiedParameter}) {
        logger.debug("${processor.name} called.");
        #if(!(${processor.returnType} == "void"))return #{end}getConfig().getClient().${processor.name}(
        #foreach($parameter in ${processor.parameters}) ${processor.unifiedParameter.name}.${parameter.getterName}()#if(${foreach.hasNext}), #end
        #end
        );
    }
#end

    public abstract BaseConfig getConfig();

    public abstract void setConfig(BaseConfig config);
}
